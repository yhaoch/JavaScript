//其他语句类型
/**1. with 作用域链
	with 用于临时扩展作用域链，在严格模式下，禁用with语句，在非严格模式下，也不推荐使用with语句
	但是在嵌套很深的时候通常会使用with来简化代码编写。比如在js客户端中，可能会使用类似下面这种表达式来防伪一个HTML表单中的元素：
	document.forms[0].address.value;
**/
with(document.forms[0]){
	//直接访问表单元素
	name.value = "";
	address.value = "";
	email.value = "";
}
/** 使用这种方法会减少大量的输入，不用再为每个属性名添加document.forms[0]前缀。这个对象临时挂载在作用域链上，当javascript需要解析诸如address的
	标识符时，会自动在这个对象中寻找。不使用with的等价语句如下：
**/
var f = document.forms[0];
f.name.value = "";
f.address.value = "";
f.email.value = "";
/**注意，只有在查标识符时才会用到作用域链，with提供了一种快速读区对象属性的方法，但是它并不能创造对象的属性，只能修改。
**/

/**2. debugger 主要用来临时调试，前提是：：：：当调试程序可用并运行的时候， 比如FireFox的调试扩展插件Firebug。
	程序有可能会抛出异常，但是我们很难直观的定位到为题所在，但是我们可以在代码中添加debugger语句。
	debugger会产生一个类似断点，程序会在degger所在的行终止，可以用调试器输出一些变量，检查一些变量。
**/
function f(o) {
	if(o == undefined) debugger;//如果o没有被输入，则f会停止执行，我们可以用调试器进行调试，分析为什么o没有被传递进来。
}

/**3. 'use strict' 是一条指令，指令不是语句。标示 代码是严格代码，以严格模式执行，至于在严格模式下有什么要求，参考 权威指南 p115
	两个‘use strict’指令和普通的语句之间有两个重要的区别：1. 不包含任何语言的关键字，只是一个带有引号的字符串 2. 指令只可以出现在任何脚本代码的开始
	或者函数体的开始，任何实体语句之前（但是不必要出现在脚本的首行或者函数体内的首行）。
**/
